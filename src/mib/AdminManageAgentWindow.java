/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mib;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.*;

/**
 *
 * @author HH
 */
public class AdminManageAgentWindow extends javax.swing.JFrame {

    private static InfDB idb;

    /**
     * Creates new form agentWindow
     */
    public AdminManageAgentWindow(InfDB idb) {
        initComponents();
        this.idb = idb;
        // Kör metoderna som fyller comboboxarna
        fillcb();
        fillcb2();
        // Dölj combobox och titel
        labelReplace.setVisible(false);
        cbchoice.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        labelWelcome = new javax.swing.JLabel();
        labelLogo = new javax.swing.JLabel();
        buttonLogout = new javax.swing.JButton();
        buttonRegisterNewAgent = new javax.swing.JButton();
        buttonListAgents = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaMain = new javax.swing.JTextArea();
        panelSide = new javax.swing.JPanel();
        btnChangeInfoAgent = new javax.swing.JButton();
        panelSideInner = new javax.swing.JPanel();
        cbLocation = new javax.swing.JComboBox<>();
        RBFieldAgent = new javax.swing.JRadioButton();
        txtAgentName = new javax.swing.JTextField();
        txtAgentPhone = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtRegDate = new javax.swing.JTextField();
        RBOffMngr = new javax.swing.JRadioButton();
        txtAgentID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        CBLocationMngr = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        RBAdmin = new javax.swing.JRadioButton();
        LbLocationMngr = new javax.swing.JLabel();
        cbchoice = new javax.swing.JComboBox<>();
        labelReplace = new javax.swing.JLabel();
        panelSearch = new javax.swing.JPanel();
        btnSearchAgent = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtSearchAgent = new javax.swing.JTextField();
        btnRemove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelWelcome.setText("Välkommen ");
        labelWelcome.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N

        labelLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mib/agent-small.png"))); // NOI18N

        buttonLogout.setText("Tillbaka");
        buttonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLogoutActionPerformed(evt);
            }
        });

        buttonRegisterNewAgent.setText("Registrera ny Agent...");
        buttonRegisterNewAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRegisterNewAgentActionPerformed(evt);
            }
        });

        buttonListAgents.setText("Lista alla Agenter");
        buttonListAgents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonListAgentsActionPerformed(evt);
            }
        });

        txtAreaMain.setColumns(20);
        txtAreaMain.setEditable(false);
        txtAreaMain.setRows(5);
        jScrollPane1.setViewportView(txtAreaMain);

        panelSide.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnChangeInfoAgent.setText("Ändra");
        btnChangeInfoAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeInfoAgentActionPerformed(evt);
            }
        });

        panelSideInner.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        RBFieldAgent.setText("Fältagent");

        jLabel4.setText("Namn");

        RBOffMngr.setText("Kontorschef");

        txtAgentID.setEditable(false);

        jLabel3.setText("Agent ID");

        CBLocationMngr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ej chef", "Svealand", "Gotaland", "Norrland" }));
        CBLocationMngr.setSelectedIndex(-1);
        CBLocationMngr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBLocationMngrActionPerformed(evt);
            }
        });

        jLabel6.setText("Område");

        jLabel5.setText("Telefon");

        jLabel10.setText("Anställningsdatum");

        RBAdmin.setText("Administratör");

        LbLocationMngr.setText("Områdeschef");

        labelReplace.setText("Välj ersättare");

        javax.swing.GroupLayout panelSideInnerLayout = new javax.swing.GroupLayout(panelSideInner);
        panelSideInner.setLayout(panelSideInnerLayout);
        panelSideInnerLayout.setHorizontalGroup(
            panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideInnerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRegDate)
                    .addComponent(txtAgentPhone)
                    .addComponent(txtAgentName)
                    .addComponent(txtAgentID)
                    .addComponent(cbLocation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CBLocationMngr, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbchoice, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelSideInnerLayout.createSequentialGroup()
                        .addGroup(panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel10)
                            .addComponent(LbLocationMngr)
                            .addComponent(RBAdmin)
                            .addComponent(RBOffMngr)
                            .addComponent(RBFieldAgent)
                            .addComponent(labelReplace))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelSideInnerLayout.setVerticalGroup(
            panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideInnerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAgentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAgentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAgentPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtRegDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LbLocationMngr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBLocationMngr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelReplace)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbchoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RBOffMngr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RBAdmin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RBFieldAgent)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        panelSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btnSearchAgent.setText("Sök");
        btnSearchAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchAgentActionPerformed(evt);
            }
        });

        jLabel1.setText("Sök Agent");

        javax.swing.GroupLayout panelSearchLayout = new javax.swing.GroupLayout(panelSearch);
        panelSearch.setLayout(panelSearchLayout);
        panelSearchLayout.setHorizontalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearchAgent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtSearchAgent)
                    .addComponent(jLabel1))
                .addContainerGap())
        );
        panelSearchLayout.setVerticalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addComponent(txtSearchAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearchAgent)
                .addContainerGap())
        );

        btnRemove.setText("Ta bort Agent");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSideLayout = new javax.swing.GroupLayout(panelSide);
        panelSide.setLayout(panelSideLayout);
        panelSideLayout.setHorizontalGroup(
            panelSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSideInner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelSideLayout.createSequentialGroup()
                        .addComponent(btnChangeInfoAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelSideLayout.setVerticalGroup(
            panelSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(panelSideInner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnChangeInfoAgent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemove)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(labelLogo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonRegisterNewAgent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelSide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonListAgents)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(188, 188, 188))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(labelLogo))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(labelWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(buttonListAgents, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(panelSide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(buttonRegisterNewAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(buttonLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void emptyInputs() {
        // Metoden tömmer alla textfält, resetar comboboxar samt radioknappar och döljer vissa comboboxar och titlar
        // Tömmer textfält
        txtAreaMain.setText("");
        txtSearchAgent.setText("");
        txtAgentID.setText("");
        txtAgentName.setText("");
        txtRegDate.setText("");
        txtAgentPhone.setText("");
        // Reset comboboxar
        cbLocation.setSelectedIndex(-1);
        CBLocationMngr.setSelectedIndex(-1);
        // Reset radioknappar
        RBAdmin.setSelected(false);
        RBOffMngr.setSelected(false);
        RBFieldAgent.setSelected(false);
        // Dölj combobox och titel
        labelReplace.setVisible(false);
        cbchoice.setVisible(false);
    }

    private void buttonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLogoutActionPerformed
        // Metoden stänger fönstret och öppnar föregående när man klickar på tillbaka knappen
        setVisible(false);
        AdminWindow adminwindow = new AdminWindow(idb);
        adminwindow.setVisible(true);
    }//GEN-LAST:event_buttonLogoutActionPerformed

    private void buttonRegisterNewAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRegisterNewAgentActionPerformed
        // Metoden öppnar fönstret Newagent när man klickar på knappen Registrera ny Agent
        NewAgentWindow newagent = new NewAgentWindow(idb);
        newagent.setVisible(true);
    }//GEN-LAST:event_buttonRegisterNewAgentActionPerformed

    private void buttonListAgentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonListAgentsActionPerformed
        // Metoden hämtar imformation om alla agenter och listar dem i ett textfönster
        // Tömmer textfönsteret 
        txtAreaMain.setText("");
        // Skapar en arraylist av hashmaps(string, string)
        ArrayList<HashMap<String, String>> agents = new ArrayList<HashMap<String, String>>();
        try {
            String query = "SELECT * FROM AGENT;";
            // Hämtar all information i en rad och sparar det i en arraylist av hashmaps(string, string)
            agents = idb.fetchRows(query);

            // Loopar igenom arraylisten och "skriver ut" agent id, namn,telefon,anställningsdatum,admin status och område för varje position i arraylisten
            for (HashMap<String, String> agent : agents) {
                txtAreaMain.append("Agent ID: " + agent.get("AGENT_ID") + "\n");
                txtAreaMain.append("Namn: " + agent.get("NAMN") + "\n");
                txtAreaMain.append("Telefon: " + agent.get("TELEFON") + "\n");
                txtAreaMain.append("Anställningsdatum: " + agent.get("ANSTALLNINGSDATUM") + "\n");
                txtAreaMain.append("Administratör: " + agent.get("ADMINISTRATOR") + "\n");
                txtAreaMain.append("Område: " + idb.fetchSingle("SELECT BENAMNING FROM OMRADE WHERE OMRADES_ID = (SELECT OMRADE FROM AGENT WHERE AGENT_ID = " + "'" + agent.get("AGENT_ID") + "')") + "\n");
                // Hämtar agent id i områdeschef och sparar det i en sträng 
                String mngrID = idb.fetchSingle("SELECT AGENT_ID FROM OMRADESCHEF WHERE AGENT_ID = " + "'" + agent.get("AGENT_ID")+ "'");
                // Kollar om agenten är områdeschef
                if(mngrID!=null){
                   txtAreaMain.append("Chef över område: " + idb.fetchSingle("SELECT BENAMNING FROM OMRADE WHERE OMRADES_ID = (SELECT OMRADE FROM OMRADESCHEF WHERE AGENT_ID = " + "'" + agent.get("AGENT_ID") + "')") + "\n");
                }
                txtAreaMain.append("--------------------------------------------------------" + "\n");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        }
    }//GEN-LAST:event_buttonListAgentsActionPerformed

    private void btnSearchAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchAgentActionPerformed
        // Metoden visar information om agenten som sökts fram
        // Kollar så att sökfältet inte är tomt
        if (Validation.isNotEmpty(txtSearchAgent)) {
            // Hämtar id för agenten som sköts fram
            String searchAgent = txtSearchAgent.getText();

            try {
                //Hämtar ID och sparar det som en int
                String agent = idb.fetchSingle("SELECT AGENT_ID FROM AGENT WHERE NAMN = " + "'" + searchAgent + "'");
                txtAgentID.setText(agent);
                int agentID = Integer.parseInt(agent);

                //Hämtar Namn
                String agentName = idb.fetchSingle("SELECT NAMN FROM AGENT WHERE AGENT_ID = " + "'" + agentID + "'");
                txtAgentName.setText(agentName);

                //Hämtar Anstdatum
                String agentHireDate = idb.fetchSingle("SELECT ANSTALLNINGSDATUM FROM AGENT WHERE AGENT_ID = " + "'" + agentID + "'");
                txtRegDate.setText(agentHireDate);

                //Hämtar Telefon
                String agentPhone = idb.fetchSingle("SELECT TELEFON FROM AGENT WHERE AGENT_ID = " + "'" + agentID + "'");
                txtAgentPhone.setText(agentPhone);

                //Hämtar Plats
                String agentLocation = idb.fetchSingle("SELECT BENAMNING FROM OMRADE WHERE OMRADES_ID = (SELECT OMRADE FROM AGENT WHERE AGENT_ID = " + "'" + agentID + "')");
                cbLocation.getModel().setSelectedItem(agentLocation);

                // Kollar om framsökt agent är kontorschef och sätter radioknappen till true isåfall
                String OfficeMngr = idb.fetchSingle("SELECT AGENT_ID FROM KONTORSCHEF");
                int Off = Integer.parseInt(OfficeMngr);
                if (Off == agentID) {
                    RBOffMngr.setSelected(true);
                } else {
                    RBOffMngr.setSelected(false);
                }
                // Kollar om framsökt agent är fältagent och sätter radioknappen till true isåfall
                ArrayList<String> fields = idb.fetchColumn("SELECT AGENT_ID FROM FALTAGENT");
                for (String field : fields) {
                    int id = Integer.parseInt(field);
                    if (agentID == id) {
                        RBFieldAgent.setSelected(true);
                    }
                }
                // // Kollar om framsökt agent är områdeschef och sätter comboboxen till det området annar "Ej chef" samt döljer comboboxar och titlar som ej är väsentliga
                String LocationQuarry = "SELECT BENAMNING FROM OMRADE JOIN OMRADESCHEF ON OMRADE.OMRADES_ID = OMRADESCHEF.OMRADE JOIN AGENT ON OMRADESCHEF.AGENT_ID = AGENT.AGENT_ID WHERE AGENT.AGENT_ID= " + "'" + agentID + "'";
                String LocationMngr = idb.fetchSingle(LocationQuarry);
                if (LocationMngr != null) {
                    CBLocationMngr.getModel().setSelectedItem(LocationMngr);
                    labelReplace.setVisible(false);
                    cbchoice.setVisible(false);
                } else {
                    CBLocationMngr.getModel().setSelectedItem("Ej chef");
                    labelReplace.setVisible(false);
                    cbchoice.setVisible(false);
                }
                // Kollar om framsökt agent är admin och sätter radioknappen till true isåfall
                String admin = idb.fetchSingle("SELECT ADMINISTRATOR from AGENT where AGENT_ID = " + agentID);
                if (admin.equals("J")) {
                    RBAdmin.setSelected(true);
                } else {
                    RBAdmin.setSelected(false);
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Agent hittades inte!");
                // Tömmer sökfältet och sätter fokus i det fältet
                txtSearchAgent.setText("");
                txtSearchAgent.requestFocus();
            }

        }

    }//GEN-LAST:event_btnSearchAgentActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // Metoden tar bort framsökt agent
        // Kollar så att id fältet inte är tomt
        if (Validation.isNotEmpty(txtAgentID)) {
            // Hämtar id och sparar det som en int 
            int agentID = Integer.parseInt(txtAgentID.getText());
            // Öppnar en ruta som frågar om man vill ta bort agenten
            int input = JOptionPane.showConfirmDialog(null, "Är du säker på att du vill ta bort agenten?", "Ta bort agent..", 2);
            // Om svaret är ja, ja = 0
            if (input == 0) {
                // Tar bort agenten ur alla tabeller
                try {
                    idb.delete("DELETE FROM INNEHAR_FORDON WHERE AGENT_ID =" + "'" + agentID + "'");
                    idb.delete("DELETE FROM INNEHAR_UTRUSTNING WHERE AGENT_ID =" + "'" + agentID + "'");
                    idb.delete("DELETE FROM AGENT WHERE AGENT_ID =" + "'" + agentID + "'");
                    idb.delete("DELETE FROM FALTAGENT WHERE AGENT_ID =" + "'" + agentID + "'");
                    idb.delete("DELETE FROM OMRADESCHEF WHERE AGENT_ID =" + "'" + agentID + "'");
                    // Om agenten var kontorschef sätts det id:t till 0 
                    if (agentID == Integer.parseInt(idb.fetchSingle("SELECT AGENT_ID FROM KONTORSCHEF"))) {
                        idb.update("UPDATE KONTORSCHEF SET AGENT_ID = " + 0);
                    }
                     // Meddelande att agenten har raderats 
                    JOptionPane.showMessageDialog(null, "Agenten har raderats");
                    // Tömmer alla fälten
                    emptyInputs();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Agent hittades inte!");
                    // Tömmer sökfältet och sätter fokus i det fältet
                    txtSearchAgent.setText("");
                    txtSearchAgent.requestFocus();
                }

            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnChangeInfoAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeInfoAgentActionPerformed
        // Metoden ändrar informationen om framsökt agent
        // Kollar så att id,namn,telefon och datum fälten inte är tomma samt att comboboxar och datum ät ifyllda rätt
        if (Validation.isNotEmpty(txtAgentID, txtAgentName, txtAgentPhone, txtRegDate) && Validation.ifCBEmpty(cbLocation, CBLocationMngr) && Validation.regexDate(txtRegDate.getText())) {
            // Hämtar agent id och sparar det lokalt som en int
            int agentID = Integer.parseInt(txtAgentID.getText());
            // Frågar om man vill utföra ändring
            int input = JOptionPane.showConfirmDialog(null, "Är du säker på att du vill ändra informationen?", "Ändra information..", 2);
            // Om svaret är ja, ja = 0
            if (input == 0) {
                // Hämtar in alla nödvändiga textfält från användaren
                String name = txtAgentName.getText();
                String telephone = txtAgentPhone.getText();
                String date = txtRegDate.getText();
                String LocMn = CBLocationMngr.getSelectedItem().toString();
                String choice = cbchoice.getSelectedItem().toString();
                String admin = "";
                try {
                    // Hämtar id för området baserat på benämningen som användaren valt och sparar det som en int
                    String Area = idb.fetchSingle("SELECT OMRADES_ID FROM OMRADE WHERE BENAMNING = " + "'" + cbLocation.getSelectedItem().toString() + "'");
                    int area = Integer.parseInt(Area);
                    // Sätter den tomma strängen admin till "J" eller "N" baserat på om radioknappen är ifylld eller inte
                    if (RBAdmin.isSelected()) {
                        admin = "J";
                    } else {
                        admin = "N";
                    }
                    // Uppdaterar agenten till kontorschef baserat på om radioknappen är ifylld eller tar bort det om ej ifylld
                    if (RBOffMngr.isSelected()) {
                        idb.update("UPDATE KONTORSCHEF SET AGENT_ID = " + "'" + agentID + "'");
                    }
                    // Uppdaterar agenten till fältagent baserat på om radioknappen är ifylld eller tar bort det om ej ifylld
                    if (RBFieldAgent.isSelected()) {
                        idb.delete("DELETE FROM FALTAGENT WHERE AGENT_ID = " + "'" + agentID + "'");
                        idb.insert("INSERT INTO FALTAGENT VALUES ('" + agentID + "')");
                    } else {
                        idb.delete("DELETE FROM FALTAGENT WHERE AGENT_ID = " + "'" + agentID + "'");
                    }
                    // Uppdaterar agentens namn,telefonnummer,anställningsdatum,adminstatus och område
                    idb.update("UPDATE AGENT SET NAMN = " + "'" + name + "'" + "WHERE AGENT_ID = " + "'" + agentID + "'");
                    idb.update("UPDATE AGENT SET TELEFON = " + "'" + telephone + "'" + "WHERE AGENT_ID = " + "'" + agentID + "'");
                    idb.update("UPDATE AGENT SET ANSTALLNINGSDATUM = " + "'" + date + "'" + "WHERE AGENT_ID = " + "'" + agentID + "'");
                    idb.update("UPDATE AGENT SET ADMINISTRATOR = " + "'" + admin + "'" + "WHERE AGENT_ID = " + "'" + agentID + "'");
                    idb.update("UPDATE AGENT SET OMRADE = " + "'" + area + "'" + "WHERE AGENT_ID = " + "'" + agentID + "'");
                    // Kollar om framsökt agent är områdeschef och spara det i strängen ag 
                    String ag = idb.fetchSingle("SELECT AGENT_ID FROM OMRADESCHEF WHERE AGENT_ID = " + "'" + agentID + "'");
                    // Om man valt att agenten ej skall vara chef och dem tidigare var det så tas den bort och ersätts med den man valt skall ersätta 
                    if (LocMn.equals("Ej chef")) {
                        if (ag != null) {
                            // Hämtar ersättande agents id och spara som int
                            String replaceid = idb.fetchSingle("SELECT AGENT_ID FROM AGENT WHERE NAMN = " + "'" + choice + "'");
                            int Replaceid = Integer.parseInt(replaceid);
                            // Hämtar områdes id på området som agenten var chef för och spara som int
                            String replaceloc = idb.fetchSingle("SELECT OMRADE FROM OMRADESCHEF WHERE AGENT_ID = " + "'" + agentID + "'");
                            int Replaceloc = Integer.parseInt(replaceloc);
                            // Tillsätter ny chef och tar bort den gamla 
                            idb.insert("INSERT INTO OMRADESCHEF VALUES ('" + Replaceid + "','" + Replaceloc + "')");
                            idb.delete("DELETE FROM OMRADESCHEF WHERE AGENT_ID = " + "'" + agentID + "'");
                        }
                    } 
                    // Om agenten är chef men men vill att den skall vara chef för ett annat område
                    else if (ag != null) {
                        // Hämtar ersättande agents id och spara som int
                        String replaceid = idb.fetchSingle("SELECT AGENT_ID FROM AGENT WHERE NAMN = " + "'" + choice + "'");
                        int Replaceid = Integer.parseInt(replaceid);
                        // Hämtar områdes id för det område agenten skall bli chef för och sparar som en int
                        String LocationMn = idb.fetchSingle("SELECT OMRADES_ID FROM OMRADE WHERE BENAMNING =" + "'" + LocMn + "'");
                        int locationMn = Integer.parseInt(LocationMn);
                        // Hämtar områdes id på området som agenten var chef för och spara som int
                        String replaceloc = idb.fetchSingle("SELECT OMRADE FROM OMRADESCHEF WHERE AGENT_ID = " + "'" + agentID + "'");
                        int Replaceloc = Integer.parseInt(replaceloc);
                        // Sätter agenten som chef för det nya området samt ersättande agent till chef för dens gamla område, tar även bort den som var chef för området innan
                        idb.insert("INSERT INTO OMRADESCHEF VALUES ('" + Replaceid + "','" + Replaceloc + "')");
                        idb.delete("DELETE FROM OMRADESCHEF WHERE AGENT_ID = " + "'" + agentID + "'");
                        idb.delete("DELETE FROM OMRADESCHEF WHERE OMRADE = (SELECT OMRADES_ID FROM OMRADE WHERE BENAMNING = '" + LocMn + "')");
                        idb.insert("INSERT INTO OMRADESCHEF VALUES ('" + agentID + "','" + locationMn + "')");
                    } 
                    // Om agenten inte är chef men skall bli det 
                    else if (ag == null) {
                        // Hämtar områdes id för det område agenten skall bli chef för och sparar som en int
                        String LocationMn = idb.fetchSingle("SELECT OMRADES_ID FROM OMRADE WHERE BENAMNING =" + "'" + LocMn + "'");
                        int locationMn = Integer.parseInt(LocationMn);
                        // Tillsätter ny chef och tar bort den gamla
                        idb.delete("DELETE FROM OMRADESCHEF WHERE OMRADE = (SELECT OMRADES_ID FROM OMRADE WHERE BENAMNING = '" + LocMn + "')");
                        idb.insert("INSERT INTO OMRADESCHEF VALUES ('" + agentID + "','" + locationMn + "')");

                    }
                    // Meddelande att agenten har upppdaterats 
                    JOptionPane.showMessageDialog(null, "Agenten har uppdaterats");
                    // Tömmer alla fälten
                    emptyInputs();
                    // Tömmer comboboxen för ersättare 
                    cbchoice.removeAllItems();
                    // Fyller comboboxen men de tillgängliga ersättande agenter
                    fillcb2();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Agent hittades inte!");
                    // Tömmer sökfältet och sätter fokus i det fältet
                    txtSearchAgent.setText("");
                    txtSearchAgent.requestFocus();
                }
            }
        }
    }//GEN-LAST:event_btnChangeInfoAgentActionPerformed

    private void CBLocationMngrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBLocationMngrActionPerformed
        // Metoden visar en till combobox beroende på vilket val man gör
        // Om valet i comboboxen inte är tomt 
        if (!txtAgentID.getText().equals("")) {
            try {
                // Hämtar framsökt agents id och spara som int
                int agentID = Integer.parseInt(txtAgentID.getText());
                // Hämtar valet gjort i comboboxen och spara det i en sträng
                String choice = CBLocationMngr.getSelectedItem().toString();
                // Kollar om framsökt agent är områdeschef och spara det i strängen ag
                String ag = idb.fetchSingle("SELECT AGENT_ID FROM OMRADESCHEF WHERE AGENT_ID = " + "'" + agentID + "'");
                // Om man valt "Ej chef" i comboboxen och den framsökta agenten är områdeschef
                if (choice.equals("Ej chef") && ag != null) {
                    // Sätt den nya comboboxen och titeln till att det skall visas 
                    labelReplace.setVisible(true);
                    cbchoice.setVisible(true);
                } 
                // Om den framsökta agenten är områdeschef men skall bli det för ett annat område
                else if (ag != null) {
                    // Sätt den nya comboboxen och titeln till att det skall visas 
                    labelReplace.setVisible(true);
                    cbchoice.setVisible(true);
                }
            } catch (NullPointerException e) {
                //
            } catch (InfException e) {
                JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
            }
        }
    }//GEN-LAST:event_CBLocationMngrActionPerformed


    private void fillcb() {
        // Metoden fyller comboboxar men alternativ hämtade från databasen
        // Hämtar kolumnen benämning från område och spara den i en arraylist av strängar
        String Location = "SELECT BENAMNING FROM OMRADE";
        ArrayList<String> allLocation;
        // Loopar igenom arraylisten och lägger till varje position i comboboxen
        try {
            allLocation = idb.fetchColumn(Location);
            for (String name : allLocation) {
                cbLocation.addItem(name);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        }
        // Sätter att startläget i comboboxen skall vara en tom poosition
        cbLocation.setSelectedIndex(-1);
    }

    private void fillcb2() {
        // Metoden fyller comboboxar men alternativ hämtade från databasen
        // Hämtar kolumnen namn från agent och spara dem i en arraylist av strängar men tar bort de namnen som finns med i områdeschef 
        String fraga = "SELECT NAMN FROM AGENT WHERE AGENT_ID NOT IN (SELECT AGENT_ID FROM OMRADESCHEF)";
        ArrayList<String> possible;
        // Loopar igenom arraylisten och lägger till varje position i comboboxen
        try {
            possible = idb.fetchColumn(fraga);
            for (String name : possible) {
                cbchoice.addItem(name);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CBLocationMngr;
    private javax.swing.JLabel LbLocationMngr;
    private javax.swing.JRadioButton RBAdmin;
    private javax.swing.JRadioButton RBFieldAgent;
    private javax.swing.JRadioButton RBOffMngr;
    private javax.swing.JButton btnChangeInfoAgent;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearchAgent;
    private javax.swing.JButton buttonListAgents;
    private javax.swing.JButton buttonLogout;
    private javax.swing.JButton buttonRegisterNewAgent;
    private javax.swing.JComboBox<String> cbLocation;
    private javax.swing.JComboBox<String> cbchoice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelLogo;
    private javax.swing.JLabel labelReplace;
    private javax.swing.JLabel labelWelcome;
    private javax.swing.JPanel panelSearch;
    private javax.swing.JPanel panelSide;
    private javax.swing.JPanel panelSideInner;
    private javax.swing.JTextField txtAgentID;
    private javax.swing.JTextField txtAgentName;
    private javax.swing.JTextField txtAgentPhone;
    private javax.swing.JTextArea txtAreaMain;
    private javax.swing.JTextField txtRegDate;
    private javax.swing.JTextField txtSearchAgent;
    // End of variables declaration//GEN-END:variables
}
