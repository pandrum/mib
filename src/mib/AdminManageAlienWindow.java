/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mib;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.*;

/**
 *
 * @author sbf
 */
public class AdminManageAlienWindow extends javax.swing.JFrame {

    private static InfDB idb;

    /**
     * Creates new form agentWindow
     */
    public AdminManageAlienWindow(InfDB idb) {
        initComponents();
        this.idb = idb;
        txtRaceInfo.setVisible(false);
        labelRaceInfo.setVisible(false);
        fillCbs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        labelWelcome = new javax.swing.JLabel();
        labelLogo = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnRegNewAlien = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        txtAreaMain = new javax.swing.JTextArea();
        panelSide = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        panelSearch = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        labelAlien = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        panelSideInner = new javax.swing.JPanel();
        labelArea = new javax.swing.JLabel();
        labelRaceInfo = new javax.swing.JLabel();
        txtAlienID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        labelDate = new javax.swing.JLabel();
        cbArea = new javax.swing.JComboBox<>();
        labelAgent = new javax.swing.JLabel();
        labelRace = new javax.swing.JLabel();
        cbAgent = new javax.swing.JComboBox<>();
        txtDate = new javax.swing.JTextField();
        txtRaceInfo = new javax.swing.JTextField();
        labelAlienID = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        cbRace = new javax.swing.JComboBox<>();
        labelPhone = new javax.swing.JLabel();
        btnRemove = new javax.swing.JButton();
        panelBottom = new javax.swing.JPanel();
        cbRaceBottom = new javax.swing.JComboBox<>();
        labelAreaBottom = new javax.swing.JLabel();
        labelRaceBottom = new javax.swing.JLabel();
        cbAreaBottom = new javax.swing.JComboBox<>();
        datePickerStart = new com.github.lgooddatepicker.components.DatePicker();
        datePickerEnd = new com.github.lgooddatepicker.components.DatePicker();
        labelStartDate = new javax.swing.JLabel();
        btnSearchByDate = new javax.swing.JButton();
        labelEndDate = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        btnListAliens = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelWelcome.setText("Välkommen ");
        labelWelcome.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N

        labelLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mib/agent-small.png"))); // NOI18N

        btnBack.setText("Tillbaka");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnRegNewAlien.setText("Registrera ny Alien...");
        btnRegNewAlien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegNewAlienActionPerformed(evt);
            }
        });

        txtAreaMain.setColumns(20);
        txtAreaMain.setEditable(false);
        txtAreaMain.setRows(5);
        scrollPane.setViewportView(txtAreaMain);

        panelSide.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSave.setText("Ändra");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        panelSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        labelAlien.setText("Sök Alien");

        btnSearch.setText("Sök");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSearchLayout = new javax.swing.GroupLayout(panelSearch);
        panelSearch.setLayout(panelSearchLayout);
        panelSearchLayout.setHorizontalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtSearch)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelSearchLayout.createSequentialGroup()
                        .addComponent(labelAlien)
                        .addGap(0, 130, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelSearchLayout.setVerticalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelAlien)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        panelSideInner.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        labelArea.setText("Plats");

        labelRaceInfo.setText("Antal Boogies");

        txtAlienID.setEditable(false);

        labelDate.setText("Registeringsdatum");

        cbArea.setToolTipText("");

        labelAgent.setText("Agent");

        labelRace.setText("Ras");

        labelAlienID.setText("Alien ID");

        labelName.setText("Namn");

        cbRace.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Squid", "Boglodite", "Worm" }));
        cbRace.setSelectedIndex(-1);
        cbRace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRaceActionPerformed(evt);
            }
        });

        labelPhone.setText("Telefon");

        javax.swing.GroupLayout panelSideInnerLayout = new javax.swing.GroupLayout(panelSideInner);
        panelSideInner.setLayout(panelSideInnerLayout);
        panelSideInnerLayout.setHorizontalGroup(
            panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideInnerLayout.createSequentialGroup()
                .addGroup(panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSideInnerLayout.createSequentialGroup()
                        .addGroup(panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSideInnerLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelRaceInfo)
                                    .addGroup(panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(labelAlienID, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labelName, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labelArea, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtAlienID, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cbArea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labelRace, javax.swing.GroupLayout.Alignment.LEADING))))
                            .addGroup(panelSideInnerLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSideInnerLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cbRace, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelSideInnerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbAgent, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelSideInnerLayout.createSequentialGroup()
                                .addGroup(panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelDate)
                                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelPhone)
                                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtRaceInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelAgent))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        panelSideInnerLayout.setVerticalGroup(
            panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideInnerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelAlienID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtAlienID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelDate, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelPhone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelRace)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbRace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelRaceInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtRaceInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnRemove.setText("Ta bort Alien");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSideLayout = new javax.swing.GroupLayout(panelSide);
        panelSide.setLayout(panelSideLayout);
        panelSideLayout.setHorizontalGroup(
            panelSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSideLayout.createSequentialGroup()
                        .addComponent(panelSideInner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSideLayout.createSequentialGroup()
                        .addGroup(panelSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRemove, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelSideLayout.createSequentialGroup()
                                .addComponent(panelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(btnSave, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        panelSideLayout.setVerticalGroup(
            panelSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelSideInner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemove)
                .addContainerGap())
        );

        panelBottom.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cbRaceBottom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Squid", "Boglodite", "Worm" }));
        cbRaceBottom.setSelectedIndex(-1);
        cbRaceBottom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRaceBottomActionPerformed(evt);
            }
        });

        labelAreaBottom.setText("Plats");

        labelRaceBottom.setText("Ras");

        cbAreaBottom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAreaBottomActionPerformed(evt);
            }
        });

        labelStartDate.setText("Startdatum");

        btnSearchByDate.setText("Sök mellan datum");
        btnSearchByDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByDateActionPerformed(evt);
            }
        });

        labelEndDate.setText("Slutdatum");

        separator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout panelBottomLayout = new javax.swing.GroupLayout(panelBottom);
        panelBottom.setLayout(panelBottomLayout);
        panelBottomLayout.setHorizontalGroup(
            panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBottomLayout.createSequentialGroup()
                .addGroup(panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBottomLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(datePickerStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelStartDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(datePickerEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelEndDate)))
                    .addComponent(btnSearchByDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelAreaBottom)
                    .addComponent(cbAreaBottom, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbRaceBottom, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelRaceBottom))
                .addContainerGap())
        );
        panelBottomLayout.setVerticalGroup(
            panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBottomLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBottomLayout.createSequentialGroup()
                        .addGroup(panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelBottomLayout.createSequentialGroup()
                                .addComponent(labelEndDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(datePickerEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelBottomLayout.createSequentialGroup()
                                .addComponent(labelStartDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(datePickerStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelBottomLayout.createSequentialGroup()
                                .addGroup(panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelAreaBottom)
                                    .addComponent(labelRaceBottom))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbAreaBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbRaceBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchByDate))
                    .addGroup(panelBottomLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        btnListAliens.setText("Lista alla Aliens");
        btnListAliens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListAliensActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(labelLogo)
                        .addGap(6, 6, 6)
                        .addComponent(labelWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(panelSide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRegNewAlien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                    .addComponent(panelBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnListAliens))
                .addGap(125, 125, 125))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(labelLogo))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnListAliens)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRegNewAlien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Metod som tömmer alla textfält och comboboxes.
    private void emptyInputs() {
        txtAreaMain.setText("");
        txtSearch.setText("");
        txtAlienID.setText("");
        txtName.setText("");
        txtDate.setText("");
        txtPhone.setText("");
        txtRaceInfo.setText("");
        //Resetar comboboxes.
        cbArea.setSelectedIndex(-1);
        cbAgent.setSelectedIndex(-1);
        cbRace.setSelectedIndex(-1);
        cbAreaBottom.setSelectedIndex(-1);
        cbRaceBottom.setSelectedIndex(-1);
    }

    private void fillCbs() {

        //Hämtar och fyllar i alla Platser i samtliga comboboxes.
        String queryLocation = "SELECT BENAMNING FROM PLATS;";
        ArrayList<String> locations = new ArrayList<>();
        try {
            locations = idb.fetchColumn(queryLocation);

            //Loopar igenom alla platser och sätter ut dessa i comboboxes i fönstret.
            for (String location : locations) {
                cbArea.addItem(location);
                cbAreaBottom.addItem(location);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        }
        //Nollar combobox
        cbArea.setSelectedIndex(-1);
        cbAreaBottom.setSelectedIndex(-1);

        //Hämtar och fyllar i alla Agenter i samtliga comboboxes.
        String queryAgent = "SELECT Namn FROM AGENT;";
        ArrayList<String> names = new ArrayList<>();
        try {
            names = idb.fetchColumn(queryAgent);
            //Loopar igenom alla agenter och sätter ut dessa i combobox i fönstret.
            for (String name : names) {
                cbAgent.addItem(name);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        }
        //Nollar combobox
        cbAgent.setSelectedIndex(-1);
    }

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        //Metod för att backa tillbaka till föregående ruta.
        setVisible(false);
        AdminWindow adminwindow = new AdminWindow(idb);
        adminwindow.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnListAliensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListAliensActionPerformed
        // Metoden hämtar imformation om alla aliens och listar dem i ett textfönster
        // Tömmer textfönsteret
        txtAreaMain.setText("");
        // Skapar en arraylist av hashmaps(string, string)
        ArrayList<HashMap<String, String>> aliens = new ArrayList<HashMap<String, String>>();

        try {
            //databasfråga som hämtar alla kolumner från alien
            String query = "SELECT * FROM ALIEN;";

            // Hämtar all information i en rad och sparar det i en arraylist av hashmaps(string, string)
            aliens = idb.fetchRows(query);

            // Loopar igenom arraylisten och "skriver ut" alien id, namn,telefon,regdatum, tillhörande plats och ansvarig agent.
            for (HashMap<String, String> alien : aliens) {
                txtAreaMain.append("Alien ID: " + alien.get("ALIEN_ID") + "\n");
                txtAreaMain.append("Namn: " + alien.get("NAMN") + "\n");
                txtAreaMain.append("Telefon: " + alien.get("TELEFON") + "\n");
                txtAreaMain.append("Registreringsdatum: " + alien.get("REGISTRERINGSDATUM") + "\n");
                //Hämtar plats. Hämtar namn istället för siffra för printa ut.
                txtAreaMain.append("Plats: " + idb.fetchSingle("SELECT BENAMNING FROM PLATS WHERE PLATS_ID = (SELECT PLATS FROM ALIEN WHERE ALIEN_ID = " + "'" + alien.get("ALIEN_ID") + "')") + "\n");
                //Hämtar ansvarig agent. Printar ut det verkliga namnet på agenten istället för bara siffran. 
                txtAreaMain.append("Ansvarig agent: " + idb.fetchSingle("SELECT NAMN FROM AGENT WHERE AGENT_ID = (SELECT ANSVARIG_AGENT FROM ALIEN WHERE ALIEN_ID = " + "'" + alien.get("ALIEN_ID") + "')") + "\n");
                txtAreaMain.append("--------------------------------------------------------" + "\n");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        }
    }//GEN-LAST:event_btnListAliensActionPerformed

    private void cbAreaBottomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAreaBottomActionPerformed
        //Tömmer textarean i mitten
        txtAreaMain.setText("");
        //Initierar en Arraylist av hashmaps som heter aliens.
        ArrayList<HashMap<String, String>> aliens = new ArrayList<HashMap<String, String>>();

        try {
            //Hämtar in val från användare i combobox.
            String choice = cbAreaBottom.getSelectedItem().toString();
            //databasfråga som hämtar alla aliens från en viss plats
            String query = "SELECT * FROM ALIEN WHERE ALIEN_ID IN (SELECT ALIEN_ID FROM ALIEN WHERE PLATS = (SELECT PLATS_ID FROM PLATS WHERE BENAMNING = '" + choice + "')) ORDER BY ALIEN_ID;";

            //skickar in fråga till databasen.
            aliens = idb.fetchRows(query);

            // Loopar igenom arraylisten och "skriver ut" alien id, namn,telefon,regdatum och ansvarig agent.
            for (HashMap<String, String> alien : aliens) {
                txtAreaMain.append("Alien ID: " + alien.get("ALIEN_ID") + "\n");
                txtAreaMain.append("Namn: " + alien.get("NAMN") + "\n");
                txtAreaMain.append("Telefon: " + alien.get("TELEFON") + "\n");
                txtAreaMain.append("Registreringsdatum: " + alien.get("REGISTRERINGSDATUM") + "\n");
                txtAreaMain.append("Ansvarig agent: " + idb.fetchSingle("SELECT NAMN FROM AGENT WHERE AGENT_ID = (SELECT ANSVARIG_AGENT FROM ALIEN WHERE ALIEN_ID = " + "'" + alien.get("ALIEN_ID") + "')") + "\n");
                txtAreaMain.append("--------------------------------------------------------" + "\n");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        } catch (java.lang.NullPointerException e) {
            //
        }
    }//GEN-LAST:event_cbAreaBottomActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // Metoden visar information om alien som sökts fram
        // Kollar så att sökfältet inte är tomt
        if (Validation.isNotEmpty(txtSearch)) {

            String searchAlien = txtSearch.getText();

            try {
                //Hämtar ID och sparar det som en int
                String alien = idb.fetchSingle("SELECT ALIEN_ID FROM ALIEN WHERE NAMN = " + "'" + searchAlien + "'");
                txtAlienID.setText(alien);
                int alienID = Integer.parseInt(alien);

                //Hämtar Namn från databasen
                String name = idb.fetchSingle("SELECT NAMN FROM ALIEN WHERE ALIEN_ID = " + "'" + alienID + "'");
                txtName.setText(name);

                //Hämtar Regdatum från databasen
                String regDate = idb.fetchSingle("SELECT REGISTRERINGSDATUM FROM ALIEN WHERE ALIEN_ID = " + "'" + alienID + "'");
                txtDate.setText(regDate);

                //Hämtar Telefon från databasen
                String phone = idb.fetchSingle("SELECT TELEFON FROM ALIEN WHERE ALIEN_ID = " + "'" + alienID + "'");
                txtPhone.setText(phone);

                //Hämtar Plats från databasen
                String location = idb.fetchSingle("SELECT BENAMNING FROM PLATS WHERE PLATS_ID = (SELECT PLATS FROM ALIEN WHERE ALIEN_ID = " + "'" + alienID + "')");
                cbArea.setSelectedItem(location);

                //Hämtar Ras genom att querya alla 3 alien tabeller
                String boglodite = idb.fetchSingle("SELECT ALIEN_ID FROM BOGLODITE WHERE ALIEN_ID = " + "'" + alienID + "'");
                String bogloditeBoogies = idb.fetchSingle("SELECT ANTAL_BOOGIES FROM BOGLODITE WHERE ALIEN_ID = " + "'" + alienID + "'");
                String squid = idb.fetchSingle("SELECT ALIEN_ID FROM SQUID WHERE ALIEN_ID = " + "'" + alienID + "'");
                String squidArms = idb.fetchSingle("SELECT ANTAL_ARMAR FROM SQUID WHERE ALIEN_ID = " + "'" + alienID + "'");
                String worm = idb.fetchSingle("SELECT ALIEN_ID FROM WORM WHERE ALIEN_ID = " + "'" + alienID + "'");

                //Jämför strängarna ovan för att kolla vilken som inte är NULL då en alien alltid måste tillhöra någon ras
                if (boglodite != null) {
                    cbRace.setSelectedItem("Boglodite");
                    txtRaceInfo.setText(bogloditeBoogies);
                } else if (squid != null) {
                    cbRace.setSelectedItem("Squid");
                    txtRaceInfo.setText(squidArms);
                } else if (worm != null) {
                    cbRace.setSelectedItem("Worm");
                }

                //Hämtar ansvarig Agent från databasen
                String agent = idb.fetchSingle("SELECT NAMN FROM AGENT WHERE AGENT_ID = (SELECT ANSVARIG_AGENT FROM ALIEN WHERE ALIEN_ID = " + "'" + alienID + "')");
                cbAgent.setSelectedItem(agent);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Alien hittades inte!");
                txtSearch.setText("");
                txtSearch.requestFocus();
            }
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void cbRaceBottomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRaceBottomActionPerformed
        //Nollar textfält.
        txtAreaMain.setText("");

        try {
            //Hämtar in val av rastillhörighet från användaren från combobox.
            String cbChoice = cbRaceBottom.getSelectedItem().toString();
            //databasfråga som hämtar alla aliens av en viss ras
            String query = "SELECT * FROM ALIEN WHERE ALIEN_ID IN (SELECT ALIEN_ID FROM " + cbChoice + ");";
            //resultatet av databasfrågan sparas i en ny arraylist av hashmaps.
            ArrayList<HashMap<String, String>> aliens = idb.fetchRows(query);

            //Printar ut all info i textrutan om en viss ras
            for (HashMap<String, String> alien : aliens) {
                txtAreaMain.append("Alien ID: " + alien.get("ALIEN_ID") + "\n");
                txtAreaMain.append("Namn: " + alien.get("NAMN") + "\n");
                txtAreaMain.append("Telefon: " + alien.get("TELEFON") + "\n");
                txtAreaMain.append("Registreringsdatum: " + alien.get("REGISTRERINGSDATUM") + "\n");
                txtAreaMain.append("Plats: " + idb.fetchSingle("SELECT BENAMNING FROM PLATS WHERE PLATS_ID IN (SELECT PLATS FROM ALIEN WHERE ALIEN_ID = " + "'" + alien.get("ALIEN_ID") + "')") + "\n");
                txtAreaMain.append("Ansvarig agent: " + idb.fetchSingle("SELECT NAMN FROM AGENT WHERE AGENT_ID IN (SELECT ANSVARIG_AGENT FROM ALIEN WHERE ALIEN_ID = " + "'" + alien.get("ALIEN_ID") + "')") + "\n");
                txtAreaMain.append("--------------------------------------------------------" + "\n");
            }
        } catch (InfException e) {
            //knas.
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        } catch (java.lang.NullPointerException e) {
            //derp
        }
    }//GEN-LAST:event_cbRaceBottomActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // Metoden ändrar informationen om framsökt alien
        // Kollar så att id,namn,telefon och datum fälten inte är tomma samt att comboboxar och datum ät ifyllda rätt
        if (Validation.isNotEmpty(txtName, txtDate, txtPhone) && Validation.ifCBEmpty(cbArea, cbRace, cbAgent) && Validation.isInteger(txtRaceInfo) && Validation.regexDate(txtDate.getText())) {

            // Frågar om man vill utföra ändring
            int input = JOptionPane.showConfirmDialog(null, "Är du säker på att du vill ändra informationen?", "Ändra information..", 2);
            // Om svaret är ja, ja = 0
            if (input == 0) {
                // Hämtar in alla nödvändiga textfält från användaren.
                int alienID = Integer.parseInt(txtAlienID.getText());
                String name = txtName.getText();
                String registration = txtDate.getText();
                String telephone = txtPhone.getText();
                String agent = cbAgent.getSelectedItem().toString();
                String area = cbArea.getSelectedItem().toString();
                String race = cbRace.getSelectedItem().toString();
                String raceInfo = txtRaceInfo.getText();

                try {
                    //Uppdaterar aliennamn till databasen med det nya namnet anv. valt.
                    idb.update("UPDATE ALIEN SET NAMN = " + "'" + name + "'" + " WHERE ALIEN_ID = " + "'" + alienID + "'");
                    //Uppdaterar registreringsdatum till databasen med det nya datumet anv. valt.
                    idb.update("UPDATE ALIEN SET REGISTRERINGSDATUM = " + "'" + registration + "'" + " WHERE ALIEN_ID = " + "'" + alienID + "'");
                    //Uppdaterar telefon till databasen med det nya telefonnumret som anv. valt.
                    idb.update("UPDATE ALIEN SET TELEFON = " + "'" + telephone + "'" + " WHERE ALIEN_ID = " + "'" + alienID + "'");

                    //Hämtar plats_ID och uppdaterar plats för alien.
                    String locationID = idb.fetchSingle("SELECT PLATS_ID FROM PLATS WHERE BENAMNING = " + "'" + area + "'");
                    Integer.parseInt(locationID);
                    idb.update("UPDATE ALIEN SET PLATS = " + "'" + locationID + "'" + " WHERE ALIEN_ID = " + "'" + alienID + "'");

                    //Hämtar agent_ID och uppdaterar ansvarig agent för alien.
                    String agentID = idb.fetchSingle("SELECT AGENT_ID FROM AGENT WHERE NAMN = " + "'" + agent + "'");
                    Integer.parseInt(agentID);
                    idb.update("UPDATE ALIEN SET ANSVARIG_AGENT = " + "'" + agentID + "'" + " WHERE ALIEN_ID = " + "'" + alienID + "'");

                    //Testar att hämta befintlig rastillhörighet från någon av de 3 alien tabellerna bogolodite, squid och worm
                    String boglodite = idb.fetchSingle("SELECT ALIEN_ID FROM BOGLODITE WHERE ALIEN_ID = " + "'" + alienID + "'");
                    String squid = idb.fetchSingle("SELECT ALIEN_ID FROM SQUID WHERE ALIEN_ID = " + "'" + alienID + "'");
                    String worm = idb.fetchSingle("SELECT ALIEN_ID FROM WORM WHERE ALIEN_ID = " + "'" + alienID + "'");

                    //Bestämmer nuvarande rastillhörighet på alien genom att kolla vilket värde som inte är mull (det värdet som inte är det bestämmer rastillhörighet).
                    String alienRace = "";
                    if (boglodite != null) {
                        alienRace = "Boglodite";
                    } else if (squid != null) {
                        alienRace = "Squid";
                    } else if (worm != null) {
                        alienRace = "Worm";
                    }

                    //Tar bort existerande rastillhörighet då en alien bara kan vara en ras åt gången.
                    idb.delete("DELETE FROM " + alienRace + " WHERE ALIEN_ID = " + alienID);

                    //Sätter ny rastillhörighet genom att hämta in det nya valet från användaren. Skickar med ytterligare info om valet är boglodite eller squid.
                    if (race.equals("Boglodite")) {
                        Integer.parseInt(raceInfo);
                        idb.insert("INSERT INTO BOGLODITE VALUES (" + alienID + "," + raceInfo + ")");
                    } else if (race.equals("Squid")) {
                        Integer.parseInt(raceInfo);
                        idb.insert("INSERT INTO SQUID VALUES (" + alienID + "," + raceInfo + ")");
                    } else if (race.equals("Worm")) {
                        idb.insert("INSERT INTO WORM VALUES (" + alienID + ")");
                    }

                    JOptionPane.showMessageDialog(null, "Ändring av information för alien lyckades!");
                    //något gick knas.
                } catch (InfException | NumberFormatException | NullPointerException e) {
                    JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
                }
                //Nollar textfält, comboxes osv.
                emptyInputs();
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cbRaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRaceActionPerformed
        try {
            //Hämtar in val från användare i combobox om rastillhörighet
            String choice = cbRace.getSelectedItem().toString();
            //Om anv. väljer boglodit visas ett nytt textfält som användare kan skicka med antal boogies.
            if (choice.equals("Boglodite")) {
                txtRaceInfo.setVisible(true);
                labelRaceInfo.setVisible(true);
                labelRaceInfo.setText("Antal Boogies");
                txtRaceInfo.setText("");
                //Om anv. väljer squid visas ett nytt textfält som användare kan skicka med antal armar.
            } else if (choice.equals("Squid")) {
                txtRaceInfo.setVisible(true);
                labelRaceInfo.setVisible(true);
                labelRaceInfo.setText("Antal armar");
                txtRaceInfo.setText("");
            } else if (choice.equals("Worm")) {
                txtRaceInfo.setText("");
                txtRaceInfo.setVisible(false);
                labelRaceInfo.setVisible(false);
            }
        } catch (NullPointerException e) {
            //
        }
    }//GEN-LAST:event_cbRaceActionPerformed

    private void btnRegNewAlienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegNewAlienActionPerformed
        //öppnar nytt fönster för att registrera ny alien.
        NewAlienWindow newalien = new NewAlienWindow(idb);
        newalien.setVisible(true);
    }//GEN-LAST:event_btnRegNewAlienActionPerformed

    private void btnSearchByDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByDateActionPerformed

        //Hämtar datum från användaren
        String userStartDate = datePickerStart.getDateStringOrEmptyString().toString();
        String userEndDate = datePickerEnd.getDateStringOrEmptyString().toString();

        //Om datumen stämmer enligt mall 'YYYY-MM-DD'
        if (Validation.regexDate(userStartDate) && Validation.regexDate(userEndDate)) {
            //Nollar textfält.
            txtAreaMain.setText("");
            //Skapar ny arraylist av hashmaps som heter aliens för att spara information om aliens i variabel.
            ArrayList<HashMap<String, String>> aliens = new ArrayList<HashMap<String, String>>();

            try {
                //Databasfråga för att filtrera aliens mellan en viss tidsram
                //Sortera enligt tidigast datum, fallande följd.
                String query = "SELECT * FROM ALIEN WHERE REGISTRERINGSDATUM BETWEEN " + "'" + userStartDate + "'" + " AND " + "'" + userEndDate + "'" + "ORDER BY REGISTRERINGSDATUM;";

                aliens = idb.fetchRows(query);

                //Loopar igenom hashmapen för att printa ut information om aliens mellan en viss tidsram. Printar ut alla rader på en ny linje och avslutar med en avskiljare "-----------"
                for (HashMap<String, String> alien : aliens) {
                    txtAreaMain.append("Alien ID: " + alien.get("ALIEN_ID") + "\n");
                    txtAreaMain.append("Namn: " + alien.get("NAMN") + "\n");
                    txtAreaMain.append("Registreringsdatum: " + alien.get("REGISTRERINGSDATUM") + "\n");
                    txtAreaMain.append("Plats: " + idb.fetchSingle("SELECT BENAMNING FROM PLATS WHERE PLATS_ID = (SELECT PLATS FROM ALIEN WHERE ALIEN_ID = " + "'" + alien.get("ALIEN_ID") + "')") + "\n");
                    txtAreaMain.append("Ansvarig agent: " + idb.fetchSingle("SELECT NAMN FROM AGENT WHERE AGENT_ID = (SELECT ANSVARIG_AGENT FROM ALIEN WHERE ALIEN_ID = " + "'" + alien.get("ALIEN_ID") + "')") + "\n");
                    txtAreaMain.append("--------------------------------------------------------" + "\n");
                }
            } catch (InfException e) {
                JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
            } catch (NullPointerException e) {
                //Om ingen resultat hittades.
                txtAreaMain.setText("");
                txtAreaMain.setText("Inga aliens hittades.");
            }
        }
    }//GEN-LAST:event_btnSearchByDateActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        //Kollar så att textfältet där alienID printas ut innehåller något.
        if (Validation.isNotEmpty(txtAlienID)) {

            //Parsa om alienID från sträng till int.
            int alienID = Integer.parseInt(txtAlienID.getText());
            //Promptar användare om denna är säker på att ta bort alien.
            int input = JOptionPane.showConfirmDialog(null, "Är du säker på att du vill ta bort alien?", "Ta bort alien..", 2);
            //Om svaret är ja (ja = 0).
            if (input == 0) {
                try {
                    //Tar bort alien_ID från boglodite, om det finns.
                    idb.delete("DELETE FROM BOGLODITE WHERE ALIEN_ID =" + "'" + alienID + "'");
                    //Tar bort alien_ID från squid, om det finns.
                    idb.delete("DELETE FROM SQUID WHERE ALIEN_ID =" + "'" + alienID + "'");
                    //Tar bort alien_ID från worm, om det finns.
                    idb.delete("DELETE FROM WORM WHERE ALIEN_ID =" + "'" + alienID + "'");
                    //Tar bort alien_ID från alien tabellen.
                    idb.delete("DELETE FROM ALIEN WHERE ALIEN_ID =" + "'" + alienID + "'");
                    JOptionPane.showMessageDialog(null, "Alien har raderats");
                    //Nollar alla fält.
                    emptyInputs();
                } catch (Exception e) {
                    //Om ingen alien med det inskickade alien_ID inte hittades.
                    JOptionPane.showMessageDialog(null, "Alien hittades inte!");
                    txtSearch.setText("");
                    txtSearch.requestFocus();
                }
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgentWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgentWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgentWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgentWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnListAliens;
    private javax.swing.JButton btnRegNewAlien;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchByDate;
    private javax.swing.JComboBox<String> cbAgent;
    private javax.swing.JComboBox<String> cbArea;
    private javax.swing.JComboBox<String> cbAreaBottom;
    private javax.swing.JComboBox<String> cbRace;
    private javax.swing.JComboBox<String> cbRaceBottom;
    private com.github.lgooddatepicker.components.DatePicker datePickerEnd;
    private com.github.lgooddatepicker.components.DatePicker datePickerStart;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel labelAgent;
    private javax.swing.JLabel labelAlien;
    private javax.swing.JLabel labelAlienID;
    private javax.swing.JLabel labelArea;
    private javax.swing.JLabel labelAreaBottom;
    private javax.swing.JLabel labelDate;
    private javax.swing.JLabel labelEndDate;
    private javax.swing.JLabel labelLogo;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelPhone;
    private javax.swing.JLabel labelRace;
    private javax.swing.JLabel labelRaceBottom;
    private javax.swing.JLabel labelRaceInfo;
    private javax.swing.JLabel labelStartDate;
    private javax.swing.JLabel labelWelcome;
    private javax.swing.JPanel panelBottom;
    private javax.swing.JPanel panelSearch;
    private javax.swing.JPanel panelSide;
    private javax.swing.JPanel panelSideInner;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSeparator separator;
    private javax.swing.JTextField txtAlienID;
    private javax.swing.JTextArea txtAreaMain;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtRaceInfo;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
