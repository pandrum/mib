/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mib;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.*;

/**
 *
 * @author HH
 */
public class AdminManageEquipmentWindow extends javax.swing.JFrame {

    private static InfDB idb;

    /**
     * Creates new form agentWindow
     */
    public AdminManageEquipmentWindow(InfDB idb) {
        initComponents();
        this.idb = idb;
        // Dölj combobox och titel
        txtEqInfo.setVisible(false);
        labelEqInfo.setVisible(false);
        // Kör metoderna som fyller comboboxarna
        fillCbs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        labelWelcome = new javax.swing.JLabel();
        labelLogo = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnRegNewEquipment = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        txtAreaMain = new javax.swing.JTextArea();
        panelSide = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        panelSearch = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        labelEquipment = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        panelSideInner = new javax.swing.JPanel();
        labelType = new javax.swing.JLabel();
        labelEqInfo = new javax.swing.JLabel();
        txtEquipmentID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        labelDate = new javax.swing.JLabel();
        cbType = new javax.swing.JComboBox<>();
        labelAgent = new javax.swing.JLabel();
        cbAgent = new javax.swing.JComboBox<>();
        txtDate = new javax.swing.JTextField();
        txtEqInfo = new javax.swing.JTextField();
        labelEquipmentID = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        btnRemove = new javax.swing.JButton();
        panelBottom = new javax.swing.JPanel();
        labelTypeBottom = new javax.swing.JLabel();
        cbTypeBottom = new javax.swing.JComboBox<>();
        separator = new javax.swing.JSeparator();
        btnListEquipment = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelWelcome.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        labelWelcome.setText("Välkommen ");

        labelLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mib/agent-small.png"))); // NOI18N

        btnBack.setText("Tillbaka");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnRegNewEquipment.setText("Registrera ny Utrustning...");
        btnRegNewEquipment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegNewEquipmentActionPerformed(evt);
            }
        });

        txtAreaMain.setEditable(false);
        txtAreaMain.setColumns(20);
        txtAreaMain.setRows(5);
        scrollPane.setViewportView(txtAreaMain);

        panelSide.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSave.setText("Ändra");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        panelSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        labelEquipment.setText("Sök Utrustning");

        btnSearch.setText("Sök");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSearchLayout = new javax.swing.GroupLayout(panelSearch);
        panelSearch.setLayout(panelSearchLayout);
        panelSearchLayout.setHorizontalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtSearch)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelSearchLayout.createSequentialGroup()
                        .addComponent(labelEquipment)
                        .addGap(0, 130, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelSearchLayout.setVerticalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelEquipment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        panelSideInner.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        labelType.setText("Typ");

        labelEqInfo.setText("Kaliber");

        txtEquipmentID.setEditable(false);

        labelDate.setText("Utkvitterings Datum");

        cbType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vapen", "Kommunikation", "Teknik" }));
        cbType.setSelectedIndex(-1);
        cbType.setToolTipText("");
        cbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTypeActionPerformed(evt);
            }
        });

        labelAgent.setText("Utlånad till Agent");

        txtEqInfo.setActionCommand("null");

        labelEquipmentID.setText("Utrustnings ID");

        labelName.setText("Benämning");

        javax.swing.GroupLayout panelSideInnerLayout = new javax.swing.GroupLayout(panelSideInner);
        panelSideInner.setLayout(panelSideInnerLayout);
        panelSideInnerLayout.setHorizontalGroup(
            panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideInnerLayout.createSequentialGroup()
                .addGroup(panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSideInnerLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelEquipmentID, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelType, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelSideInnerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbAgent, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelSideInnerLayout.createSequentialGroup()
                                .addGroup(panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelDate)
                                    .addComponent(labelAgent)
                                    .addComponent(labelEqInfo)
                                    .addComponent(labelName))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(cbType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelSideInnerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtEqInfo))
                    .addGroup(panelSideInnerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtDate))
                    .addGroup(panelSideInnerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtName))
                    .addGroup(panelSideInnerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtEquipmentID)))
                .addContainerGap())
        );
        panelSideInnerLayout.setVerticalGroup(
            panelSideInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideInnerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelEquipmentID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEquipmentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelDate, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelEqInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEqInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        btnRemove.setText("Ta bort Utrustning");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSideLayout = new javax.swing.GroupLayout(panelSide);
        panelSide.setLayout(panelSideLayout);
        panelSideLayout.setHorizontalGroup(
            panelSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelSideLayout.createSequentialGroup()
                        .addGroup(panelSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelSideInner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelSideLayout.setVerticalGroup(
            panelSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelSideInner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemove)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        panelBottom.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelTypeBottom.setText("Typ");

        cbTypeBottom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vapen", "Kommunikation", "Teknik" }));
        cbTypeBottom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTypeBottomActionPerformed(evt);
            }
        });

        separator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout panelBottomLayout = new javax.swing.GroupLayout(panelBottom);
        panelBottom.setLayout(panelBottomLayout);
        panelBottomLayout.setHorizontalGroup(
            panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBottomLayout.createSequentialGroup()
                .addGap(396, 396, 396)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTypeBottom)
                    .addComponent(cbTypeBottom, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(176, Short.MAX_VALUE))
        );
        panelBottomLayout.setVerticalGroup(
            panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBottomLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBottomLayout.createSequentialGroup()
                        .addComponent(labelTypeBottom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbTypeBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        btnListEquipment.setText("Lista all Utrustning");
        btnListEquipment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListEquipmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(labelLogo)
                        .addGap(6, 6, 6)
                        .addComponent(labelWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(panelSide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRegNewEquipment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                    .addComponent(panelBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnListEquipment))
                .addGap(125, 125, 125))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(labelLogo))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnListEquipment)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRegNewEquipment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void emptyInputs() {
        // Metoden tömmer alla textfält, resetar comboboxar samt radioknappar och döljer vissa comboboxar och titlar
        // Tömmer textfält
        txtAreaMain.setText("");
        txtSearch.setText("");
        txtEquipmentID.setText("");
        txtName.setText("");
        txtDate.setText("");
        txtEqInfo.setText("");
        // Reset comboboxar
        cbType.setSelectedIndex(-1);
        cbAgent.setSelectedIndex(-1);
        cbTypeBottom.setSelectedIndex(-1);
    }

    private void fillCbs() {
        // Metoden fyller comboboxar men alternativ hämtade från databasen
        // Lägger till alternativet "Ej utlånad" i comboboxen
        cbAgent.addItem("Ej utlånad");
        // Hämtar kolumnen namn från agent och spara dem i en arraylist av strängar
        String queryAgent = "SELECT Namn FROM AGENT;";
        ArrayList<String> names = new ArrayList<>();
        // Loopar igenom arraylisten och lägger till varje position i comboboxen
        try {
            names = idb.fetchColumn(queryAgent);

            for (String name : names) {
                cbAgent.addItem(name);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        }
        // Sätter att startläget i comboboxen skall vara en tom poosition
        cbAgent.setSelectedIndex(-1);
        cbType.setSelectedIndex(-1);
        cbTypeBottom.setSelectedIndex(-1);
    }

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // Metoden stänger fönstret och öppnar föregående när man klickar på tillbaka knappen
        setVisible(false);
        AdminWindow adminwindow = new AdminWindow(idb);
        adminwindow.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnListEquipmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListEquipmentActionPerformed
        // Metoden hämtar imformation om alla agenter och listar dem i ett textfönster
        // Tömmer textfönsteret 
        txtAreaMain.setText("");
        // Skapar en arraylist av hashmaps(string, string)
        ArrayList<HashMap<String, String>> equipments = new ArrayList<HashMap<String, String>>();
        try {
            String query = "SELECT * FROM UTRUSTNING;";
            // Hämtar all information i en rad och sparar det i en arraylist av hashmaps(string, string)
            equipments = idb.fetchRows(query);
            // Loopar igenom arraylisten och "skriver ut" utrustnings id och namn  för varje position i arraylisten
            for (HashMap<String, String> equipment : equipments) {
                txtAreaMain.append("Utrustnings ID: " + equipment.get("UTRUSTNINGS_ID") + "\n");
                txtAreaMain.append("Namn: " + equipment.get("BENAMNING") + "\n");
                // Hämtar utrustnings id från innehar utrustning och sparar det i en sträng 
                String datesID = idb.fetchSingle("SELECT UTRUSTNINGS_ID FROM INNEHAR_UTRUSTNING WHERE UTRUSTNINGS_ID = " + "'" + equipment.get("UTRUSTNINGS_ID") + "'");
                // Kollar om utrustningen är utlånad
                if (datesID != null){
                    txtAreaMain.append("Utkvitterings Datum: " + idb.fetchSingle("SELECT UTKVITTERINGSDATUM FROM INNEHAR_UTRUSTNING WHERE UTRUSTNINGS_ID = " + "'" + equipment.get("UTRUSTNINGS_ID") + "'") + "\n");
                    txtAreaMain.append("Utlånad till: " + idb.fetchSingle("SELECT NAMN FROM AGENT WHERE AGENT_ID = (SELECT AGENT_ID FROM INNEHAR_UTRUSTNING WHERE UTRUSTNINGS_ID = " + "'" + equipment.get("UTRUSTNINGS_ID") + "')") + "\n");
                }
                txtAreaMain.append("--------------------------------------------------------" + "\n");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        }
    }//GEN-LAST:event_btnListEquipmentActionPerformed

    private void cbTypeBottomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTypeBottomActionPerformed
        // Metoden listar utrustning beroende på vilken typ det är, användaren välser det i en combobox
        // Kollar så att sökfältet inte är tomt
        txtAreaMain.setText("");

        try {
            // Hämtar valet gjort i comboboxen och spara det i en sträng
            String cbChoice = cbTypeBottom.getSelectedItem().toString();
            String query = "SELECT * FROM UTRUSTNING WHERE UTRUSTNINGS_ID IN (SELECT UTRUSTNINGS_ID FROM " + cbChoice + ");";
            // Skapar en arraylist av hashmaps(string, string)
            // Hämtar all information i en rad och sparar det i en arraylist av hashmaps(string, string) baserat på valet
            ArrayList<HashMap<String, String>> equipments = idb.fetchRows(query);
            // Loopar igenom arraylisten och "skriver ut" utrustnings id och namn  för varje position i arraylisten
            for (HashMap<String, String> equipment : equipments) {
                txtAreaMain.append("Utrustnings ID: " + equipment.get("UTRUSTNINGS_ID") + "\n");
                txtAreaMain.append("Namn: " + equipment.get("BENAMNING") + "\n");
                // Hämtar utrustnings id från innehar utrustning och sparar det i en sträng 
                String datesID = idb.fetchSingle("SELECT UTRUSTNINGS_ID FROM INNEHAR_UTRUSTNING WHERE UTRUSTNINGS_ID = " + "'" + equipment.get("UTRUSTNINGS_ID") + "'");
                // Kollar om utrustningen är utlånad
                if (datesID != null){
                    txtAreaMain.append("Utkvitterings Datum: " + idb.fetchSingle("SELECT UTKVITTERINGSDATUM FROM INNEHAR_UTRUSTNING WHERE UTRUSTNINGS_ID = " + "'" + equipment.get("UTRUSTNINGS_ID") + "'") + "\n");
                    txtAreaMain.append("Utlånad till: " + idb.fetchSingle("SELECT NAMN FROM AGENT WHERE AGENT_ID = (SELECT AGENT_ID FROM INNEHAR_UTRUSTNING WHERE UTRUSTNINGS_ID = " + "'" + equipment.get("UTRUSTNINGS_ID") + "')") + "\n");
                }
                txtAreaMain.append("--------------------------------------------------------" + "\n");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        } catch (java.lang.NullPointerException e) {
            
        }
    }//GEN-LAST:event_cbTypeBottomActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // Metoden visar information om utrustningen som sökts fram
        // Kollar så att sökfältet inte är tomt
        if (Validation.isNotEmpty(txtSearch)) {
            // Hämtar id för utrustningen som sköts fram
            String searchEquipment = txtSearch.getText();

            try {
                //Hämtar ID och spara det som en int
                String equipmentid = idb.fetchSingle("SELECT UTRUSTNINGS_ID FROM UTRUSTNING WHERE BENAMNING = " + "'" + searchEquipment + "'");
                txtEquipmentID.setText(equipmentid);
                int equipmentID = Integer.parseInt(equipmentid);

                //Hämtar Namn
                String name = idb.fetchSingle("SELECT BENAMNING FROM UTRUSTNING WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");
                txtName.setText(name);

                //Hämtar Kvittdatum
                String kvittDate = idb.fetchSingle("SELECT UTKVITTERINGSDATUM FROM INNEHAR_UTRUSTNING WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");
                txtDate.setText(kvittDate);

                //Hämtar Plats
                String location = idb.fetchSingle("SELECT BENAMNING FROM PLATS WHERE PLATS_ID = (SELECT PLATS FROM ALIEN WHERE ALIEN_ID = " + "'" + equipmentID + "')");
                cbType.setSelectedItem(location);

                //Hämtar Typen och dess information
                String vapen = idb.fetchSingle("SELECT UTRUSTNINGS_ID FROM VAPEN WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");
                String kaliber = idb.fetchSingle("SELECT KALIBER FROM VAPEN WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");
                String kommunikation = idb.fetchSingle("SELECT UTRUSTNINGS_ID FROM KOMMUNIKATION WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");
                String overforingsteknik = idb.fetchSingle("SELECT OVERFORINGSTEKNIK FROM KOMMUNIKATION WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");
                String teknik = idb.fetchSingle("SELECT UTRUSTNINGS_ID FROM TEKNIK WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");
                String kraftkalla = idb.fetchSingle("SELECT KRAFTKALLA FROM TEKNIK WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");

                // Beroende på vad för typ den framsökta utrustningen är så sätts comboboxen till den rätta titeln samt tillhörande information
                if (vapen != null) {
                    cbType.setSelectedItem("Vapen");
                    txtEqInfo.setText(kaliber);
                } else if (kommunikation != null) {
                    cbType.setSelectedItem("Kommunikation");
                    txtEqInfo.setText(overforingsteknik);
                } else if (teknik != null) {
                    cbType.setSelectedItem("Teknik");
                    txtEqInfo.setText(kraftkalla);
                }

                //Hämtar agent från innehar utrustning
                String agent = idb.fetchSingle("SELECT NAMN FROM AGENT WHERE AGENT_ID = (SELECT AGENT_ID FROM INNEHAR_UTRUSTNING WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "')");
                // Kollar om utrustningen är utlånad och sätter vilken agent den är lånad till eller "Ej utlånad" om det inte finns i listan
                if (agent != null) {
                    cbAgent.setSelectedItem(agent);
                } else {
                    cbAgent.setSelectedItem("Ej utlånad");
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Utrustningen hittades inte!");
                // Tömmer sökfältet och sätter fokus i det fältet
                txtSearch.setText("");
                txtSearch.requestFocus();
            }

        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // Metoden ändrar informationen om framsökt agent
        // Kollar så att id och namn fälten inte är tomma samt att comboboxar och datum ät ifyllda rätt
        if (Validation.isNotEmpty(txtName) && Validation.ifCBEmpty(cbType, cbAgent) && Validation.regexDate(txtDate.getText())) {
            // Frågar om man vill utföra ändring
            int input = JOptionPane.showConfirmDialog(null, "Är du säker på att du vill ändra informationen?", "Ändra information..", 2);
            // Om svaret är ja, ja = 0
            if (input == 0) {
                // Hämtar agent id och sparar det lokalt som en int
                int equipmentID = Integer.parseInt(txtEquipmentID.getText());
                // Hämtar in alla nödvändiga textfält från användaren
                String name = txtName.getText();
                String kvittDate = txtDate.getText();
                String agent = cbAgent.getSelectedItem().toString();
                String type = cbType.getSelectedItem().toString();
                String eqinfo = txtEqInfo.getText();
                try {
                    //Uppdaterar utrustningsnamn
                    idb.update("UPDATE UTRUSTNING SET BENAMNING = " + "'" + name + "'" + " WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");

                    // Kollar om utrustningen är utkvitterad och uppdaterar kvittenssdatum isåfall
                    String exist = idb.fetchSingle("SELECT UTRUSTNINGS_ID FROM INNEHAR_UTRUSTNING WHERE UTRUSTNINGS_ID ='" + equipmentID + "'");
                    if (exist != null) {

                        idb.update("UPDATE INNEHAR_UTRUSTNING SET UTKVITTERINGSDATUM = " + "'" + kvittDate + "'" + " WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");
                    }

                    // Om man valt att "Ej utlånad" så tas utrustningen bort från innehar utrustning 
                    if (agent.equals("Ej utlånad")) {
                        idb.delete("DELETE FROM INNEHAR_UTRUSTNING WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");

                    } 
                    // Om utrusningen är utlånad och man vill byta agenten den är lånad till 
                    else if (exist != null) {
                        // Hämtar ersättande agents id och spara som int
                        String agentid = idb.fetchSingle("SELECT AGENT_ID FROM AGENT WHERE NAMN = " + "'" + agent + "'");
                        int agentID = Integer.parseInt(agentid);
                        // Tillsätter ny agent 
                        idb.update("UPDATE INNEHAR_UTRUSTNING SET AGENT_ID = '" + agentID + "'" + "WHERE UTRUSTNINGS_ID ='" + equipmentID + "'");
                    } 
                    // Om utrustningen inte är utlånad 
                    else if (exist == null) {
                        // Hämtar ersättande agents id och spara som int
                        String agentid = idb.fetchSingle("SELECT AGENT_ID FROM AGENT WHERE NAMN = " + "'" + agent + "'");
                        int agentID = Integer.parseInt(agentid);
                        // Lägger till utrustningen i innehar utrustning 
                        idb.insert("INSERT INTO INNEHAR_UTRUSTNING VALUES ('" + agentID + "','" + equipmentID + "','" + kvittDate + "')");
                    }

                    //Hämtar typ
                    String vapen = idb.fetchSingle("SELECT UTRUSTNINGS_ID FROM VAPEN WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");
                    String kommunikation = idb.fetchSingle("SELECT UTRUSTNINGS_ID FROM KOMMUNIKATION WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");
                    String teknik = idb.fetchSingle("SELECT UTRUSTNINGS_ID FROM TEKNIK WHERE UTRUSTNINGS_ID = " + "'" + equipmentID + "'");

                    //Bestämmer nuvarande typ genom att kolla vilken tabell utrustningen ligger i och sätter strängen EPinfo till den korrekta
                    String Epinfo = "";
                    if (vapen != null) {
                        Epinfo = "Vapen";
                    } else if (kommunikation != null) {
                        Epinfo = "Kommunikation";
                    } else if (teknik != null) {
                        Epinfo = "Teknik";
                    }

                    //Tar bort existerande Typen
                    idb.delete("DELETE FROM " + Epinfo + " WHERE UTRUSTNINGS_ID = " + equipmentID);

                    //Sätter ny typ baserat på de användaren valt i comboboxen
                    if (type.equals("Vapen")) {
                        idb.insert("INSERT INTO VAPEN VALUES (" + equipmentID + ",'" + eqinfo + "')");
                    } else if (type.equals("Kommunikation")) {
                        idb.insert("INSERT INTO KOMMUNIKATION VALUES (" + equipmentID + ",'" + eqinfo + "')");
                    } else if (type.equals("Teknik")) {
                        idb.insert("INSERT INTO TEKNIK VALUES (" + equipmentID + ",'" + eqinfo + "')");
                    }
                    // Meddelande att utrustningen har upppdaterats 
                    JOptionPane.showMessageDialog(null, "Ändring av information för utrustningen lyckades!");
                } catch (InfException | NumberFormatException | NullPointerException e) {
                    JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
                }
                // Tömmer alla fälten
                emptyInputs();
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnRegNewEquipmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegNewEquipmentActionPerformed
        // Metoden öppnar fönstret Newequipment när man klickar på knappen Registrera ny Utrustning
        NewEquipmentWindow newequipment = new NewEquipmentWindow(idb);
        newequipment.setVisible(true);
    }//GEN-LAST:event_btnRegNewEquipmentActionPerformed

    private void cbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTypeActionPerformed
        // Metoden visar en till combobox beroende på vilket val man gör
        try {
            // Hämtar valet gjort i comboboxen och spara det i en sträng
            String choice = cbType.getSelectedItem().toString();
            // Om man valt Vapen i comboboxen
            if (choice.equals("Vapen")) {
                // Sätts den nya comboboxen och titeln till att det skall visas
                txtEqInfo.setVisible(true);
                labelEqInfo.setVisible(true);
                // Titeln sätts till den överstämmande information till typen
                labelEqInfo.setText("Kaliber");
                txtEqInfo.setText("");
            } 
            // Om man valt Kommunikation i comboboxen
            else if (choice.equals("Kommunikation")) {
                // Sätts den nya comboboxen och titeln till att det skall visas
                txtEqInfo.setVisible(true);
                labelEqInfo.setVisible(true);
                // Titeln sätts till den överstämmande information till typen
                labelEqInfo.setText("Typ av överföringsteknik");
                txtEqInfo.setText("");
            } 
            // Om man valt Teknik i comboboxen
            else if (choice.equals("Teknik")) {
                // Sätts den nya comboboxen och titeln till att det skall visas
                txtEqInfo.setVisible(true);
                labelEqInfo.setVisible(true);
                // Titeln sätts till den överstämmande information till typen
                labelEqInfo.setText("Typ av kraftkälla");
                txtEqInfo.setText("");
            }
        } catch (NullPointerException e) {
            
        }
    }//GEN-LAST:event_cbTypeActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // Metoden tar bort framsökt utrusning
        // Kollar så att id fältet inte är tomt
        if (Validation.isNotEmpty(txtEquipmentID)) {
            // Hämtar id och sparar det som en int
            int equipmentID = Integer.parseInt(txtEquipmentID.getText());
            // Öppnar en ruta som frågar om man vill ta bort utrustningen
            int input = JOptionPane.showConfirmDialog(null, "Är du säker på att du vill ta bort utrustningen?", "Ta bort utrustning..", 2);
            // Om svaret är ja, ja = 0
            if (input == 0) {
                try {
                    // Tar bort utrustningen ur alla tabeller
                    idb.delete("DELETE FROM INNEHAR_UTRUSTNING WHERE UTRUSTNINGS_ID =" + "'" + equipmentID + "'");
                    idb.delete("DELETE FROM VAPEN WHERE UTRUSTNINGS_ID =" + "'" + equipmentID + "'");
                    idb.delete("DELETE FROM KOMMUNIKATION WHERE UTRUSTNINGS_ID =" + "'" + equipmentID + "'");
                    idb.delete("DELETE FROM TEKNIK WHERE UTRUSTNINGS_ID =" + "'" + equipmentID + "'");
                    idb.delete("DELETE FROM UTRUSTNING WHERE UTRUSTNINGS_ID =" + "'" + equipmentID + "'");
                    // Meddelande att utrustningen har raderats
                    JOptionPane.showMessageDialog(null, "Utrustningen har raderats");
                    // Tömmer alla fälten
                    emptyInputs();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Utrustningen hittades inte!");
                    // Tömmer sökfältet och sätter fokus i det fältet
                    txtSearch.setText("");
                    txtSearch.requestFocus();
                }
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgentWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgentWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgentWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgentWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnListEquipment;
    private javax.swing.JButton btnRegNewEquipment;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbAgent;
    private javax.swing.JComboBox<String> cbType;
    private javax.swing.JComboBox<String> cbTypeBottom;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel labelAgent;
    private javax.swing.JLabel labelDate;
    private javax.swing.JLabel labelEqInfo;
    private javax.swing.JLabel labelEquipment;
    private javax.swing.JLabel labelEquipmentID;
    private javax.swing.JLabel labelLogo;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelType;
    private javax.swing.JLabel labelTypeBottom;
    private javax.swing.JLabel labelWelcome;
    private javax.swing.JPanel panelBottom;
    private javax.swing.JPanel panelSearch;
    private javax.swing.JPanel panelSide;
    private javax.swing.JPanel panelSideInner;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSeparator separator;
    private javax.swing.JTextArea txtAreaMain;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtEqInfo;
    private javax.swing.JTextField txtEquipmentID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
